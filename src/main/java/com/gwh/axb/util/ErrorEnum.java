package com.gwh.axb.util;

public enum ErrorEnum {
    //基础业务码
    SUCCESS("0", "success", "0", "成功"),
    FAIL("-1", "exception", "-1", "操作失败"),
    FAILException("500", "Exception", "500", "程序异常"),

    BUSINESS_SUCCESS("0", "该业务办理成功", "0", "业务办理成功"),
    BUSINESS_FAIL("-1", "该业务办理失败", "-1", "业务办理失败"),

    ERROR("999", "系统异常,请稍后重试", "E_9999", "系统内部异常,请稍后重试"),

    HTTP_METHOD_FAIL("110", "请求方式错误", "110", "请求方式错误"),

    PARAM_ERROR("400", "参数错误", "400", "参数错误"),
    PARAM_READABLE_ERROR("401", "参数不可解析", "401", "参数不可解析"),

    SQL_ERROR("501", "数据库操作有误", "501", "数据库操作有误"),
    //玫瑰园模块  error
    QW_1("0", "查询结果为空","0", "查询结果为空"),
    QW_2("-1","信息不存在","-1","信息不存在"),
    QW_3("-1","查询结果为空","-1","查询结果为空"),
    QW_4("-1","无此二维码信息","-1","无此二维码信息"),
    QW_5("-1","你好！达到评分上限","-1","你好！评分达到上限"),


    /**
     * 请求处理异常，请稍后再试
     */
    E_101("101", "请求处理异常，请稍后再试", "101", "请求处理异常，请稍后再试"),
    /**
     * 请求方式有误，请检查 GET/POST
     */
    E_102("102", "请求方式有误，请检查 GET/POST", "102", "请求方式有误，请检查 GET/POST"),
    /**
     * 请求参数格式不正确
     */
    E_103("103", "请求参数格式不正确", "103", "请求参数格式不正确"),
    /**
     * 缺少必填参数
     */
    E_104("104", "缺少必填参数", "104", "缺少必填参数"),
    /**
     * redis程序运行相关异常
     */
    E_105("105", "redis程序运行相关异常", "105", "redis程序运行相关异常"),
    /**
     * 未注册子系统访问
     */
    E_106("106", "未注册子系统访问", "106", "未注册子系统访问"),
    /**
     * 盐值已失效
     */
    E_108("108", "盐值已失效", "108", "盐值已失效"),
    /**
     * 盐值错误
     */
    E_109("109", "盐值错误", "109", "盐值错误"),
    /**
     * 无权访问
     */
    E_110("110", "无权访问", "110", "无权访问"),

    /**
     * 验证码已失效
     */
    E_10003("10003", "验证码已失效", "10003", "验证码已失效"),
    /**
     * 该手机号码已注册
     */
    E_11001("11001", "该手机号码已注册", "11001", "该手机号码已注册"),
    /**
     * 用户名或密码错误
     */
    E_12001("12001", "用户名或密码错误", "12001", "用户名或密码错误"),
    /**
     * 用户已经被锁定
     */
    E_12002("12002", "用户已经被锁定", "12002", "用户已经被锁定"),
    /**
     * 用户已经被删除
     */
    E_12003("12003", "用户已经被删除", "12003", "用户已经被删除"),
    /**
     * 该用户不存在
     */
    E_12004("12004", "该用户不存在", "12004", "该用户不存在"),
    /**
     * 验证码错误
     */
    E_10004("10004", "验证码错误", "10004", "验证码错误"),
    /**
     * 验证码错误
     */
    E_10005("10005", "图片验证码已失效", "10005", "图片验证码已失效"),

    /**
     * 验证码错误
     */
    E_10006("10006", "图片验证码错误", "10006", "图片验证码错误"),

    /**
     * 请先输入新的图片验证码
     */
    E_10007("10007", "请先输入新的图片验证码", "10007", "请先输入新的图片验证码"),

    /**
     * 短信接口发送短信失败
     */
    E_10011("10011", "短信接口发送短信失败", "10011", "短信接口发送短信失败"),
    /**
     * 短信接口发送短信异常
     */
    E_10012("10012", "短信接口发送短信异常", "10012", "短信接口发送短信异常"),

    /**
     * JWT处理异常
     */
    E_21001("21001", "JWT处理异常", "21001", "JWT处理异常"),
    /**
     * token为空
     */
    E_21002("21002", "token为空", "21002", "token为空"),
    /**
     * shiro程序运行相关异常
     */
    E_21003("21003", "shiro程序运行相关异常", "21003", "shiro程序运行相关异常"),
    /**
     * 用户已经被锁定
     */
    E_21005("21005", "用户已经被锁定", "21005", "用户已经被锁定"),
    /**
     * 用户已经被删除
     */
    E_21006("21006", "用户已经被删除", "21006", "用户已经被删除"),
    /**
     * 用户不存在
     */
    E_21007("21007", "用户不存在", "21007", "用户不存在"),
    /**
     * token已失效
     */
    E_21009("21009", "token已失效", "21009", "token已失效"),

    UIAS_SUBSYSTEM_EXISTS("17001", "子系统名称已存在", "17001", "子系统名称已存在"),
    UIAS_SUBSYSTEM_NOT_EXISTS("17002", "该子系统信息不存在", "17002", "该子系统信息不存在"),
    UIAS_SUBSYSTEM_ID_EXISTS("17003", "子系统ID已存在", "17003", "子系统ID已存在"),
    PARTY_MEMBER_ERROR("17004", "查询党建平台异常", "17004", "查询党建平台异常"),

    E_18001("18001", "今日已经签到", "18001", "今日已经签到"),
    E_18002("18002", "查询志愿者接口调用失败", "18002", "查询志愿者接口调用失败"),
    E_18003("18003", "获取房屋信息失败", "18003", "获取房屋信息失败"),
    ;
    private String innerCode; //对内响应码
    private String innerMsg;  //对内响应信息
    private String outterCode;  //对外响应码
    private String outterMsg;   //对外响应信息

    public String getInnerCode() {
        return innerCode;
    }

    public void setInnerCode(String innerCode) {
        this.innerCode = innerCode;
    }

    public String getInnerMsg() {
        return innerMsg;
    }

    public void setInnerMsg(String innerMsg) {
        this.innerMsg = innerMsg;
    }

    public String getOutterCode() {
        return outterCode;
    }

    public void setOutterCode(String outterCode) {
        this.outterCode = outterCode;
    }

    public String getOutterMsg() {
        return outterMsg;
    }

    public void setOutterMsg(String outterMsg) {
        this.outterMsg = outterMsg;
    }

    ErrorEnum(String innerCode, String innerMsg, String outterCode, String outterMsg) {
        this.innerCode = innerCode;
        this.innerMsg = innerMsg;
        this.outterCode = outterCode;
        this.outterMsg = outterMsg;
    }
}
